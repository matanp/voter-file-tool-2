// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

enum PrivilegeLevel {
  Developer
  Admin
  RequestAccess
  ReadAccess
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  privilegeLevel PrivilegeLevel  @default(ReadAccess)
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VoterRecordArchive {
  id                    Int       @id @default(autoincrement())
  VRCNUM                String
  recordEntryYear       Int
  recordEntryNumber     Int
  lastName              String?
  firstName             String?
  middleInitial         String?
  suffixName            String?
  houseNum              Int?
  street                String?
  apartment             String?
  halfAddress           String?
  resAddrLine2          String?
  resAddrLine3          String?
  city                  String?
  state                 String?
  zipCode               String?
  zipSuffix             String?
  telephone             String?
  email                 String?
  mailingAddress1       String?
  mailingAddress2       String?
  mailingAddress3       String?
  mailingAddress4       String?
  mailingCity           String?
  mailingState          String?
  mailingZip            String?
  mailingZipSuffix      String?
  party                 String?
  gender                String?
  DOB                   DateTime?
  L_T                   String?
  electionDistrict      Int?
  countyLegDistrict     String?
  stateAssmblyDistrict  String?
  stateSenateDistrict   String?
  congressionalDistrict String?
  CC_WD_Village         String?
  townCode              String?
  lastUpdate            DateTime?
  originalRegDate       DateTime?
  statevid              String?

  @@unique([VRCNUM, recordEntryYear, recordEntryNumber])
}

model VoterRecord {
  VRCNUM                     String                @id
  votingRecords              VotingHistoryRecord[]
  committee                  CommitteeList?        @relation(fields: [committeeId], references: [id])
  committeeId                Int?
  addressForCommittee        String?
  latestRecordEntryYear      Int
  latestRecordEntryNumber    Int
  lastName                   String?
  firstName                  String?
  middleInitial              String?
  suffixName                 String?
  houseNum                   Int?
  street                     String?
  apartment                  String?
  halfAddress                String?
  resAddrLine2               String?
  resAddrLine3               String?
  city                       String?
  state                      String?
  zipCode                    String?
  zipSuffix                  String?
  telephone                  String?
  email                      String?
  mailingAddress1            String?
  mailingAddress2            String?
  mailingAddress3            String?
  mailingAddress4            String?
  mailingCity                String?
  mailingState               String?
  mailingZip                 String?
  mailingZipSuffix           String?
  party                      String?
  gender                     String?
  DOB                        DateTime?
  L_T                        String?
  electionDistrict           Int?
  countyLegDistrict          String?
  stateAssmblyDistrict       String?
  stateSenateDistrict        String?
  congressionalDistrict      String?
  CC_WD_Village              String?
  townCode                   String?
  lastUpdate                 DateTime?
  originalRegDate            DateTime?
  statevid                   String?
  hasDiscrepancy             Boolean?
  addToCommitteeRequest      CommitteeRequest[]    @relation(name: "addToCommitteeRequest")
  removeFromCommitteeRequest CommitteeRequest[]    @relation(name: "removeFromCommitteeRequest")
}

model VotingHistoryRecord {
  id            Int         @id @default(autoincrement())
  voterRecord   VoterRecord @relation(fields: [voterRecordId], references: [VRCNUM], onDelete: Cascade)
  voterRecordId String
  date          DateTime
  value         String
}

model CommitteeList {
  id                          Int                          @id @default(autoincrement())
  cityTown                    String
  legDistrict                 Int
  electionDistrict            Int
  committeeMemberList         VoterRecord[]
  CommitteeRequest            CommitteeRequest[]
  CommitteeDiscrepancyRecords CommitteeUploadDiscrepancy[]

  @@unique([cityTown, legDistrict, electionDistrict])
}

model CommitteeRequest {
  id                  Int           @id @default(autoincrement())
  committeList        CommitteeList @relation(fields: [committeeListId], references: [id])
  committeeListId     Int
  addVoterRecord      VoterRecord?  @relation(name: "addToCommitteeRequest", fields: [addVoterRecordId], references: [VRCNUM], onDelete: Cascade)
  addVoterRecordId    String?
  removeVoterRecord   VoterRecord?  @relation(name: "removeFromCommitteeRequest", fields: [removeVoterRecordId], references: [VRCNUM], onDelete: Cascade)
  removeVoterRecordId String?
  requestNotes        String?
}

model DropdownLists {
  id                    Int      @id @default(autoincrement())
  city                  String[]
  zipCode               String[]
  street                String[]
  countyLegDistrict     String[]
  stateAssmblyDistrict  String[]
  stateSenateDistrict   String[]
  congressionalDistrict String[]
  townCode              String[]
  electionDistrict      String[]
  party                 String[]
}

model CommitteeUploadDiscrepancy {
  id          String        @id @default(cuid())
  VRCNUM      String        @unique
  committee   CommitteeList @relation(fields: [committeeId], references: [id])
  committeeId Int
  discrepancy Json
}

model ElectionDate {
  id   Int      @id @default(autoincrement())
  date DateTime
}

model OfficeName {
  id         Int    @id @default(autoincrement())
  officeName String
}
