// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model VoterRecordArchive {
  id                   Int   @id @default(autoincrement())
  VRCNUM               Int     
  recordEntryYear      Int      
  recordEntryNumber    Int      
  lastName             String?
  firstName            String?
  middleInitial        String?
  suffixName           String?
  houseNum             Int?
  street               String?
  apartment            String?
  halfAddress          String?
  resAddrLine2         String?
  resAddrLine3         String?
  city                 String?
  state                String?
  zipCode              String?
  zipSuffix            String?
  telephone            String?
  email                String?
  mailingAddress1      String?
  mailingAddress2      String?
  mailingAddress3      String?
  mailingAddress4      String?
  mailingCity          String?
  mailingState         String?
  mailingZip           String?
  mailingZipSuffix     String?
  party                String?
  gender               String?
  DOB                  DateTime?
  L_T                  String?
  electionDistrict     Int?
  countyLegDistrict    String?
  stateAssmblyDistrict String?
  stateSenateDistrict  String?
  congressionalDistrict String?
  CC_WD_Village        String?
  townCode             String?
  lastUpdate           DateTime?
  originalRegDate      DateTime?
  statevid             String?

  @@unique([VRCNUM, recordEntryYear, recordEntryNumber])
}

model VoterRecord {
  VRCNUM               Int      @id
  votingRecords        VotingHistoryRecord[]
  committee           CommitteeList? @relation(fields: [committeeId], references: [id])
  committeeId         Int?
  latestRecordEntryYear      Int      
  latestRecordEntryNumber    Int   
  lastName             String?
  firstName            String?
  middleInitial        String?
  suffixName           String?
  houseNum             Int?
  street               String?
  apartment            String?
  halfAddress          String?
  resAddrLine2         String?
  resAddrLine3         String?
  city                 String?
  state                String?
  zipCode              String?
  zipSuffix            String?
  telephone            String?
  email                String?
  mailingAddress1      String?
  mailingAddress2      String?
  mailingAddress3      String?
  mailingAddress4      String?
  mailingCity          String?
  mailingState         String?
  mailingZip           String?
  mailingZipSuffix     String?
  party                String?
  gender               String?
  DOB                  DateTime?
  L_T                  String?
  electionDistrict     Int?
  countyLegDistrict    String?
  stateAssmblyDistrict String?
  stateSenateDistrict  String?
  congressionalDistrict String?
  CC_WD_Village        String?
  townCode             String?
  lastUpdate           DateTime? 
  originalRegDate      DateTime? 
  statevid             String?
  hasDiscrepancy       Boolean?
}

model VotingHistoryRecord {
  id          Int   @id @default(autoincrement())
  voterRecord VoterRecord @relation(fields: [voterRecordId], references: [VRCNUM], onDelete: Cascade)
  voterRecordId Int
  date        DateTime
  value       String
}

model CommitteeList {
  id Int @id @default(autoincrement())
  cityTown String   
  legDistrict Int
  electionDistrict Int
  committeeMemberList    VoterRecord[]

  @@unique([cityTown, legDistrict, electionDistrict])
}

